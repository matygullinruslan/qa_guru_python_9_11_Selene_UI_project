{"name": "test_added_cart_favorites", "status": "failed", "statusDetails": {"message": "selene.core.exceptions.TimeoutException: Message: \n\nTimed out after 4s, while waiting for:\nbrowser.element(('css selector', '.static-text')).has text text\n\nReason: AssertionError: actual text: Страницы избранного\nScreenshot: file://C:\\Users\\rusel\\.selene\\screenshots\\1713159024904\\1713159024904.png\nPageSource: file://C:\\Users\\rusel\\.selene\\screenshots\\1713159024904\\1713159024904.html", "trace": "fn = <selene.core.conditions.ElementCondition object at 0x000002670D041E50>\n\n    def logic(fn: Callable[[E], R]) -> R:\n        finish_time = time.time() + self._timeout\n    \n        while True:\n            try:\n>               return fn(self.entity)\n\n..\\..\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\selene\\core\\wait.py:119: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\..\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\selene\\core\\condition.py:174: in __call__\n    return self._fn(entity)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nentity = <selene.core.entity.Element object at 0x000002670CFF1760>\n\n    def fn(entity: E) -> None:\n        query_to_str = str(query)\n        result = (\n            query.__name__ if query_to_str.startswith('<function') else query_to_str\n        )\n        actual = query(entity)\n        if not predicate(actual):\n>           raise AssertionError(f'actual {result}: {actual}')\nE           AssertionError: actual text: Страницы избранного\n\n..\\..\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\selene\\core\\condition.py:146: AssertionError\n\nDuring handling of the above exception, another exception occurred:\n\n    def test_added_cart_favorites():\n    \n        favorites_page.open()\n    \n        favorites_page.find_cart('Поясная сумка')\n    \n        favorites_page.detail_item()\n    \n        favorites_page.add_to_favorites()\n    \n        favorites_page.entrance_to_favorites()\n    \n>       favorites_page.should_to_favorites('BAG379-3 Мужская поясная сумка ручной работы их натуральной кожи')\n\ntests\\test_favorites.py:16: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\npage\\favorites_page.py:28: in should_to_favorites\n    browser.element('.static-text').should(have.text(\n..\\..\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\selene\\core\\entity.py:132: in should\n    self.wait.for_(condition)\n..\\..\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\selene\\core\\wait.py:150: in for_\n    return self._decorator(self)(logic)(fn)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nfn = <selene.core.conditions.ElementCondition object at 0x000002670D041E50>\n\n    def logic(fn: Callable[[E], R]) -> R:\n        finish_time = time.time() + self._timeout\n    \n        while True:\n            try:\n                return fn(self.entity)\n            except Exception as reason:\n                if time.time() > finish_time:\n                    reason_string = '{name}: {message}'.format(\n                        name=reason.__class__.__name__,\n                        message=getattr(reason, \"msg\", str(reason)),\n                    )\n                    # TODO: think on how can we improve logging failures in selene, e.g. reverse msg and stacktrace\n                    # stacktrace = getattr(reason, 'stacktrace', None)\n                    # TODO: should we have an option to turn on stacktrace logging?\n                    timeout = self._timeout\n                    entity = self.entity\n    \n                    # if it's a normal function, it should have __qualname__,\n                    # then use it, otherwise use str(fn)\n                    fn_name = getattr(\n                        fn,\n                        '__qualname__',\n                        getattr(fn, '__str__', lambda: str(fn))(),\n                    )\n    \n                    failure = TimeoutException(\n                        f'\\n'\n                        f'\\nTimed out after {timeout}s, while waiting for:'\n                        f'\\n{entity}.{fn_name}'\n                        f'\\n'\n                        f'\\nReason: {reason_string}'\n                    )\n    \n>                   raise self._hook_failure(failure)\nE                   selene.core.exceptions.TimeoutException: Message: \nE                   \nE                   Timed out after 4s, while waiting for:\nE                   browser.element(('css selector', '.static-text')).has text text\nE                   \nE                   Reason: AssertionError: actual text: Страницы избранного\nE                   Screenshot: file://C:\\Users\\rusel\\.selene\\screenshots\\1713159024904\\1713159024904.png\nE                   PageSource: file://C:\\Users\\rusel\\.selene\\screenshots\\1713159024904\\1713159024904.html\n\n..\\..\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\selene\\core\\wait.py:148: TimeoutException"}, "start": 1713159053529, "stop": 1713159061942, "uuid": "69ac90c0-4168-4bf3-80c8-7ae97242f4fe", "historyId": "2cff4fbe0d1ae6bd55b2e8502838f8cb", "testCaseId": "2cff4fbe0d1ae6bd55b2e8502838f8cb", "fullName": "tests.test_favorites#test_added_cart_favorites", "labels": [{"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_favorites"}, {"name": "host", "value": "LAPTOP-KJ0V928H"}, {"name": "thread", "value": "1156-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_favorites"}]}